# Arithmetic

add = fun (a, b)
  {int.__add__}(a, b)
end

sub = fun (a, b)
  {int.__sub__}(a, b)
end

mul = fun (a, b)
  {int.__mul__}(a, b)
end

div = fun (a, b)
  {int.__floordiv__}(a, b)
end

mod = fun (a, b)
  {int.__mod__}(a, b)
end

max = fun (a, b)
  {max}(a, b)
end

min = fun (a, b)
  {min}(a, b)
end

# Boolean

and = fun (a, b)
  {lambda a, b: a and b}(a, b)
end

or = fun (a, b)
  {lambda a, b: a or b}(a, b)
end

not = fun (a)
  {lambda a: not a}(a)
end

# Input, output

print = fun (s)
  {print}(s)
end

input = fun ()
  {input}()
end

# String manipulation

concat = fun (a, b)
  {str.__add__}({str}(a), {str}(b))
end

# Comparisons

eq = fun (a, b)
  {lambda a, b: a == b}(a, b)
end

gt = fun (a, b)
  {lambda a, b: a > b}(a, b)
end

lt = fun (a, b)
  {lambda a, b: a < b}(a, b)
end

# Testing

assert = fun (e, v)
  if e `eq` v then
    v
  else
    print("Assertion Error " `concat` e `concat` " != " `concat` v)
    v
  end
end

# Lists

length = fun (l)
  {len}(l)
end

append = fun (l, i)
  {lambda l, i: l.append(i)}(l, i)
  l
end

range = fun (a, b)
  l = []
  i = a
  while i `lt` b do
    l `append` i
    i = i `add` 1
  end
  l
end

map = fun (f, l)
  nl = []
  i = 0
  while i `lt` length(l) do
    nl `append` f(l[i])
    i = i `add` 1
  end
  nl
end

reduce = fun (f, l)
  acc = l[0]
  i = 1
  while i `lt` length(l) do
    acc = acc `f` l[i]
    i = i `add` 1
  end
  acc
end

filter = fun (f, l)
  nl = []
  i = 0
  while i `lt` length(l) do
    if f(l[i]) then
      nl `append` l[i]
    end
    i = i `add` 1
  end
  nl
end

# Files

File = data
  open -> fun (filename, mode)
    {open}(filename, mode)
  end
  seek -> fun (file, position)
    if position then
      {lambda f, p: f.seek(p)}(file, position)
    end
    {lambda f: f.seek()}(file)
  end
  read -> fun (file, bytes)
    {lambda f, b: f.read(b)}(file, bytes)
  end
  write -> fun (file, bytes)
    {lambda f, b: f.write(b)}(file, bytes)
  end
  close -> fun (file)
    {lambda f: f.close()}(file)
  end
end